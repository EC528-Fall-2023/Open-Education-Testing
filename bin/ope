#!/bin/bash
#set -x
# Copyright (C) 2022 by Jonathan Appavoo, Boston University
# Revised by Yuxi Ge, Boston University 2023
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Services information
# --------------------

RMDIR="rm -rf"

# REPO Services
REPO_CMD="git"
INIT="init"
REMOTE_ADD="remote add"
CHECK_REMOTES="remote -v"
CLONE="clone"
CLONE_TEMPLATE="$CLONE --depth 1 --branch"
PULL="pull"
PUSH="push"
PUSH_FIRST="push -u"
SWITCH_BRANCH="checkout"
CREATE_BRANCH="checkout -b"
IGNORE_FILE=".gitignore"
RENAME_BRANCH="branch -M"
FETCH="fetch"
ADD="add"
COMMIT="commit -m"
CURRENT_BRANCH="branch --show-current"
REBASE="rebase"
IF_INSIDE_REPO="rev-parse --is-inside-work-tree"
SHOW_TOP_LEVEL="rev-parse --show-toplevel"
DEFAULT_REMOTE_NAME=origin

# email services
EMAIL_SERVICE="gmail"

# OPE INFORMATION
# --------------------
OPE_ORG_NAME="OPEFFORT"
OPE_GITURL="git@github.com:${OPE_ORG_NAME}"
OPE_CONFIG_DIR=".ope"
OPE_CONFIG_NAME="${OPE_CONFIG_DIR}/name"
OPE_PROJECT_TEMPLATE="project-template"
OPE_CONTAINER_TEMPLATE="container-template"
OPE_CONTAINERS_DIR=containers
OPE_BOOK_TEMPLATE="book-template"
OPE_BOOKS_DIR=books
OPE_BOOK_CONTENT_SOURCE=../../content
OPE_CONTENT_TEMPLATE="content-template"
OPE_CONTENT_DIR=content
OPE_CONTENT_EXAMPLES="content-examples"
OPE_CONTENT_EXAMPLES_DIR="$OPE_CONTENT_DIR/examples"
OPE_EXAMPLE_PART="$OPE_CONTENT_DIR/examples/part"
OPE_EXAMPLE_BOOK_PART=dummy_part
OPE_BOOK_CONTENT_SEEDS="${OPE_CONTENT_EXAMPLES_DIR}/book/intro.md ${OPE_CONTENT_EXAMPLES_DIR}/book/config.yml"
OPE_CONTENT_SEEDS="${OPE_CONTENT_EXAMPLES_DIR}/css ${OPE_CONTENT_EXAMPLES_DIR}/python ${OPE_CONTENT_EXAMPLES_DIR}/src ${OPE_CONTENT_EXAMPLES_DIR}/images ${OPE_CONTENT_EXAMPLES_DIR}/images/logo.png"


UPSTREAM_BRANCHES=("main" "coursecontenttemplate" "Documentation")
# --------- Script begins here -------------

# Script Configuration
HEADER="[OPE] "
VERBOSE=0
LOG_FILE="/tmp/ope.$$.log"

# Color Configuration
Color_Off='\033[0m'       # Text Reset
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White
Grey='\033[0;37m'         # Grey
BBlack='\033[1;30m'       # Bold Black
BCyan='\033[1;36m'        # Bold Cyan
BGreen='\033[1;32m'

# Helper functions
fc_header_logging (){
    local current_time=$(date +%T)
    local cwd=$(pwd)
    echo "[${current_time}]: ${0##*/} $1 $cwd" >> $LOG_FILE
}

rolling_output () {
    local input=$(cat <&0 | tr '\r' '\n')
    if [[ $VERBOSE -eq 0 ]]; then
        echo $input | while read line; do echo -ne "\033[2K\r"; printf "     ${Grey}$line${Color_Off}\r"; done
    else
        cat <&0
    fi
}

verify_repo (){

    local name=$1
    # Check if we are inside a repository
    if ! ${REPO_CMD} ${IF_INSIDE_REPO} &>/dev/null; then
        echo -e "$HEADER${Red}ERROR: No repository for project${Color_Off}"
        return -1
    fi
    return 0
    # Check if we are inside an OPE repository
    #output=$(${REPO_CMD} ${CHECK_REMOTES})
    #if [[ -n $name ]] && ! echo "$output" | grep -q "$name"; then
    #    echo -e "$HEADER${Red}ERROR: Not a valid OPE repository${Color_Off}"
    #    return -1
    #fi

    # Check if we are inside the top level of the OPE repository
    #if [ "$(pwd)" != "$(${REPO_CMD} ${SHOW_TOP_LEVEL})" ]; then
    #    cd "$(${REPO_CMD} ${SHOW_TOP_LEVEL})"
    #fi
}

get_help_from_makefile(){
    local option=$1
    cat Makefile | grep -E '^[a-zA-Z0-9_%/-]+:.*?## .*$$' | grep -E "^${option}" | tr -d '#' |column -t -s : | tr '-' ' '
}

clone_template() {
    local repo=$1
    local name=$2
    local branch=$3
    [[ -z $repo ]] && return 0
    [[ -z $name ]] && return 0
    [[ -z $branch ]] && branch=main

    if ! $REPO_CMD $CLONE_TEMPLATE $branch $OPE_GITURL/${repo}.git $name >/dev/null 2>&1; then
	echo "ERROR: ${FUNCNAME[0]}: failed to clone $repo:$branch as $name" > /dev/stderr
	exit -1
    else
	$RMDIR $name/.git
    fi
    return 0
}

function repo_add
#DESCRIPTION: add a repository to a project
{
    local repourl=$1
    local name=$2
    local autopush=$3
    
    # Logging information
    local func_name=${FUNCNAME[0]}
    local func_args=$@
    fc_header_logging "$func_name $func_args"

    local pdir=$(projectdir)
    [[ -z $pdir ]] && return -1
       
    # Help message
    if [[ $name == '-h' ]]; then
        echo "Usage:  ${0##*/} ${func_name} [git remote url] [name] [autopush]"
        echo "   Add a git repository to the project to store and tack"
        echo "   all the project content.  With now arguments will "
	echo "   Indicate if there is a repo for the project and what it is"
	echo "   Eg. ope repo_add git@github.com:myuser/opeproject.git"
	echo " - If specified name will be used for the remote default is $DEFAULT_REMOTE_NAME"
	echo " - If autopush is not empty then an initial push of all project content will be done"
        return -1
    fi

    [[ -z $name ]] && name=$DEFAULT_REMOTE_NAME
    (
	cd $pdir
	if ! verify_repo ; then
	    if [[ -n $repourl ]]; then
		echo "setting up repo"
		$REPO_CMD $INIT
		$REPO_CMD $ADD $OPE_CONFIG_DIR
		$REPO_CMD $COMMIT "starting OPE Project $(cat $OPE_CONFIG_NAME)"
		$REPO_CMD $RENAME_BRANCH main
		$REPO_CMD $REMOTE_ADD $name $repourl
		if [[ -n $autopush ]]; then
		    $REPO_CMD $ADD *; $REPO_CMD $COMMIT 'starting materials'
		    $REPO_CMD $PUSH_FIRST $name main
		else 
		    echo "You should now add the rest of your content to the repo and push it to the remote"
		    echo "Eg. $REPO_CMD $ADD *; $REPO_CMD $COMMIT 'starting materials'"
		    echo "and be sure to push your content to your remote"
		    echo "$REPO_CMD $PUSH_FIRST $name main"
		fi
	    fi
	fi
    ) 2>&1 | tee >(sed "s/$(printf '\033')\[[0-9;]*[a-zA-Z]//g" >> $LOG_FILE) 
}

function new_project
#DESCRIPTION: create a new ope project from the ope templates
{
    local name=$1
    local repo=$2
    
    # Logging information
    local func_name=${FUNCNAME[0]}
    local func_args=$@
    fc_header_logging "$func_name $func_args"

    # Help message
    if [[ -z $name || $name == '-h' ]]; then
        echo "Usage:  ${0##*/} ${func_name} <project name> [repo url]"
        echo "   create an organization using ope template of the name specified"
        echo "   eg. ope create MyProject"
        echo "   will create a new local repository seeded from the ope "
        echo "   templates.  See the ope gettings started doc for more info."
	echo "   Within a project you can will typically add books and containers."
	echo "   See ope new_book and ope new_container"
	echo "   If you supply a repository url the project will be configured with it"
        return -1
    fi

    {
        # Check if the project already exists locally
        if [[ -d $name ]]; then
            echo -e "$HEADER${Red}ERROR: Project Directory $name already exists${Color_Off}"
            return -1
        fi

        # Create the project from ope template
	clone_template $OPE_PROJECT_TEMPLATE $name

	# seed project config
	if [[ -d $name/$OPE_CONFIG_DIR ]]; then
  	    echo $name > $name/$OPE_CONFIG_NAME
	else
	    echo -e "$HEADER${Red}ERROR: FATAL could not locate ope project config dir${Color_Off}"
            return -1
        fi

	# seed project content structure
	clone_template $OPE_CONTENT_TEMPLATE $name/$OPE_CONTENT_DIR

	# get a copy of the example content
        clone_template $OPE_CONTENT_EXAMPLES $name/$OPE_CONTENT_EXAMPLES_DIR

	# seed local copies of typical content from examples
	for seed in $OPE_CONTENT_SEEDS; do
	    local sb=$(basename $seed)
	    if [[ ! -a $name/$OPE_CONTENT_DIR/$sb ]]; then
		cp -r $name/$seed $name/$OPE_CONTENT_DIR
	    fi
	done

	if [[ -n $repo ]]; then
	    (
		cd $name
		repo_add $repo $DEFAULT_REMOTE_NAME yes
	    )
	fi
    } 2>&1 | tee >(sed "s/$(printf '\033')\[[0-9;]*[a-zA-Z]//g" >> $LOG_FILE) 
}

findprojectdir()
{
    if [[ -r ${OPE_CONFIG_NAME} ]]; then
	pwd -P
    elif [[ $(pwd -P) != / ]]; then
	cd ..
	findprojectdir
    fi	
}

projectdir()
{
    pd=$(findprojectdir)
    if [[ -n $pd ]]; then
	echo $pd
	return 0
    else
	echo -e "$HEADER${Red}ERROR: You don't seem to be in an ope project${Color_Off}" > /dev/stderr
        return -1
    fi
}

new_part()
{
    local name=$1
    if [[ -z $name ]]; then
	return -1;
    fi
    if [[ ! -a $name ]]; then
	cp -r $OPE_EXAMPLE_PART $name
    fi
}

function new_book
#DESCRIPTION: create a new publishable book for your content
{   
    local name=$1
    
    # Logging information
    local func_name=${FUNCNAME[0]}
    local func_args=$@
    fc_header_logging "$func_name $func_args"

    local pdir=$(projectdir)
    [[ -z $pdir ]] && return -1
    
    # Help message
    if [[ -z $name || $name == '-h' ]]; then
        echo "Usage:  ${0##*/} ${func_name} <book name>"
        echo "   create a new book of the name specified"
        echo "   eg. ope ${func_name} textbook"
        return -1
    fi
    (
	cd $pdir
        # Check if the book already exists 
        if [[ -d ${OPE_BOOKS_DIR}/$name ]]; then
	    echo -e "$HEADER${Red}ERROR: book directory $name already exists${Color_Off}"
	    return -1
        fi

        # Create the book from ope book template
	clone_template $OPE_BOOK_TEMPLATE ${OPE_BOOKS_DIR}/$name

	# link book content to project content
	(
	    cd ${OPE_BOOKS_DIR}/$name
	    if [[ ! -d ${OPE_BOOK_CONTENT_SOURCE} ]]; then
		echo "ERROR can't find ope project content directory"
		exit -1
	    fi
	    ln -s ${OPE_BOOK_CONTENT_SOURCE} content
	)
	# Create the minimum necessary book specific content files
	for file in $OPE_BOOK_CONTENT_SEEDS; do
	    local fb=$(basename $file)
	    if [[ ! -a ${OPE_CONTENT_DIR}/${name}_${fb} ]]; then
		if ! cp $file ${OPE_CONTENT_DIR}/${name}_${fb}; then
		    echo "ERROR creating ${OPE_CONTENT_DIR}/${name}_$fb" > /dev/stderr
		    exit -1
		fi
	    fi
	done
	
	cat > ${OPE_CONTENT_DIR}/${name}_toc.yml <<EOF
format: jb-book
root: ${name}_intro
parts:
- caption: 'Part 1'
  numbered: true
  chapters:
  - file: ${OPE_EXAMPLE_BOOK_PART}/chapter
    sections: 
    - file: ${OPE_EXAMPLE_BOOK_PART}/section
EOF
	new_part ${OPE_CONTENT_DIR}/${OPE_EXAMPLE_BOOK_PART}
    ) 2>&1 | tee >(sed "s/$(printf '\033')\[[0-9;]*[a-zA-Z]//g" >> $LOG_FILE) 
}

function new_container
#DESCRIPTION: add source for building a new container for your project
{
    local name=$1
    
    # Logging information
    local func_name=${FUNCNAME[0]}
    local func_args=$@
    fc_header_logging "$func_name $func_args"

    local pdir=$(projectdir)
    [[ -z $pdir ]] && return -1
    
    # Help message
    if [[ -z $name || $name == '-h' ]]; then
        echo "Usage:  ${0##*/} ${func_name} <container name>"
        echo "   create source for a new container of the name specified"
        echo "   eg. ope ${func_name} standard"
        return -1
    fi
    (
	cd $pdir
        # Check if the container already exists 
        if [[ -d ${OPE_CONTAINER_DIR}/$name ]]; then
	    echo -e "$HEADER${Red}ERROR: container directory $name already exists${Color_Off}"
	    return -1
        fi
        # Create the container from ope book template
	clone_template $OPE_CONTAINER_TEMPLATE ${OPE_CONTAINERS_DIR}/$name
    ) 2>&1 | tee >(sed "s/$(printf '\033')\[[0-9;]*[a-zA-Z]//g" >> $LOG_FILE)    
}

function update
#DESCRIPTION: Rebase current project with the latest changes from OPEFFORT templates
{
    # Logging information
    local func_name=${FUNCNAME[0]}
    fc_header_logging "$func_name"

    local pdir=$(projectdir)
    [[ -z $pdir ]] && return -1

    # Helper function to rebase from a specific OPEFFORT template
    rebase_from_template() {
        local template_name=$1
        local template_branch=$2
        local template_repo="$OPE_GITURL/${template_name}.git"

        echo -e "$HEADER${Cyan}Updating ${template_name} from ${template_repo}${Color_Off}"

        if ! $REPO_CMD $FETCH $template_repo $template_branch; then
            echo -e "$HEADER${Red}ERROR: Failed to fetch updates from ${template_repo}${Color_Off}"
            return -1
        fi

        if ! $REPO_CMD $REBASE FETCH_HEAD; then
            echo -e "$HEADER${Red}ERROR: Rebase failed. Please resolve conflicts and complete the rebase manually.${Color_Off}"
            return -1
        fi

        echo -e "$HEADER${Green}Rebase completed successfully for ${template_name}${Color_Off}"
    }

    (
        cd $pdir

        # Rebasing from container-template, book-template, and content-example
        for template in container-template book-template content-example; do
            rebase_from_template $template "main"
            if [[ $? -ne 0 ]]; then
                echo -e "$HEADER${Red}ERROR: Failed to update ${template}${Color_Off}"
                return -1
            fi
        done

        echo -e "$HEADER${Green}Project successfully updated with the latest OPEFFORT templates.${Color_Off}"
    ) 2>&1 | tee >(sed "s/$(printf '\033')\[[0-9;]*[a-zA-Z]//g" >> $LOG_FILE)
}


function build
#DESCRIPTION: build the book
{
    local option=$1


    if [[ $option = '-h' ]]; then
        echo "Usage:  ${0##*/} build [options]"
        echo
        echo "   will build based on the current branch"
        echo
        get_help_from_makefile build
        echo "   See the ope gettings started doc for more info."
        return -1
    fi

    if [[ ! -z "$option" ]]; then
        option="-${option}"
        echo $option
    fi

    # Logging information
    func_name=${FUNCNAME[0]}
    func_args=$@
    fc_header_logging "$func_name $func_args"

    {
        current_branch=$(${REPO_CMD} ${CURRENT_BRANCH})
        echo -e "$HEADER${Cyan}Building the on ${Color_Off}${BCyan}${current_branch}${Color_Off}"
        make build${option}
        echo -e "$HEADER${Green}${current_branch} has been successfully built ${Color_Off}"
    } 2>&1 | tee >(sed "s/$(printf '\033')\[[0-9;]*[a-zA-Z]//g" >> $LOG_FILE)

}

function pub
#DESCRIPTION: publish the book
{   
    local option=$1


    if [[ $option = '-h' ]]; then
        echo "Usage:  ${0##*/} pub [options]"
        echo
        echo "   will publish the materials based on the current branch"
        echo
        get_help_from_makefile pub
        echo "   See the ope gettings started doc for more info."
        return -1
    fi

    if [[ ! -z "$option" ]]; then
        option="-${option}"
        echo $option
    fi

    current_branch=$(${REPO_CMD} ${CURRENT_BRANCH})
    echo -e "$HEADER${Cyan}Publishing the on ${Color_Off}${BCyan}${current_branch}${Color_Off}"
    make pub
    echo -e "$HEADER${Green}${current_branch} has been successfully published ${Color_Off}"
}

function test
#DESCRIPTION: run .ipynb tests to verify environment is properly set up
{   
    ipython $(git $SHOW_TOP_LEVEL)/tests/All-tests.ipynb
}

function new_course
#DESCRIPTION: Creates a new ope project seeded with 3 books (textbook, lecture notes, and labmanual) and one container 
{
    local project_name=$1
    local repo_url=$2
    
    # Logging information
    local func_name=${FUNCNAME[0]}
    local func_args=$@
    fc_header_logging "$func_name $func_args"

    if [[ -z $project_name || $project_name == '-h' ]]; then
        echo "Usage:  ${0##*/} ${func_name} <project name> [repo url]"
        echo "   Create a new ope project with a standard set of books and a container."
        return -1
    fi

    # Create a new project
    new_project "$project_name" "$repo_url"
    if [[ $? -ne 0 ]]; then
        echo -e "$HEADER${Red}ERROR: Failed to create project $project_name${Color_Off}"
        return -1
    fi

    # Navigate to the project directory
    cd "$project_name"

    # Create standard set of books
    for book in textbook lecture_notes lab_manual; do
        new_book "$book"
        if [[ $? -ne 0 ]]; then
            echo -e "$HEADER${Red}ERROR: Failed to create book $book${Color_Off}"
            return -1
        fi
    done

    # Create a standard container
    new_container "standard_container"
    if [[ $? -ne 0 ]]; then
        echo -e "$HEADER${Red}ERROR: Failed to create container standard_container${Color_Off}"
        return -1
    fi

    echo -e "$HEADER${Green}New course $project_name created successfully with standard books and container.${Color_Off}"
    return 0
}

print_func_page()
{
    local func_names=($(grep '^function' $0 | awk '{print $2}'))
    grep '^#DESCRIPTION' $0 | awk -F: '{print $2}' | while read line ; do echo -e "  ${Blue}${func_names[$i]}${Color_Off}, $line\n"; i=$((i+1)); done | column -t -s,
}

Usage()
{
    echo 
    echo "Usage:  ${0##*/} FUNCTION {ARGS} " >&2
    echo
    echo "A command-line tool for building open source infrastructures using ope framework"
    echo 
    echo "Functions: "
    print_func_page
    echo
    echo "for each func use '-h' to print its Usage: eg. ${0##*/} dump -h"
    echo "will print the Usage for the dump command"
}




process_args()
{
  if [[ $# == 0 || $1 = '-h' ]]
  then
    Usage
    exit -1
  fi

  dofunc=$1
}

set -e
set -o pipefail

process_args "$@"
shift

$dofunc "$@"

exit $?
